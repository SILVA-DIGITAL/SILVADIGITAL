import React, { FC, useEffect, useState, useReducer } from 'react'
import { listTalks as ListTalks } from '../../graphql/queries'
import { createTalk as CreateTalk } from '../../graphql/mutations'
import { API, graphqlOperation } from 'aws-amplify'
import { v4 as uuid } from 'uuid'

interface Talk {
  id: number
  clientId: number | null
  name: string
  description: string
  speakerName: string
  speakerBio: string
  items?: Talk[]
}

interface Talks {
  [index: number]: Talk
  map: Function
}

interface ListTalks {
  listTalks: Talk
}

const initialState = {
  name: '' as string,
  description: '' as string,
  speakerName: '' as string,
  speakerBio: '' as string,
  talks: [] as Talks,
}

const reducer = (state: any, action: any) => {
  switch (action.type) {
    case 'SET_TALKS':
      return { ...state, talks: action.talks }
    case 'SET_INPUT':
      return { ...state, [action.key]: action.value }
    case 'CLEAR_INPUT':
      return { ...initialState, talks: state.talks }
    default:
      return state
  }
}

const Talks: FC = () => {
  const [state, dispatch] = useReducer(reducer, initialState)
  const { name, description, speakerBio, speakerName, talks } = state

  const CLIENT_ID = uuid() as string

  useEffect(() => {
    getData()
  }, [])

  const getData = async () => {
    try {
      const talkData = (await API.graphql(graphqlOperation(ListTalks))) as {
        data: ListTalks
      }
      dispatch({ type: 'SET_TALKS', talks: talkData.data.listTalks.items })
    } catch (err) {
      console.log('error fetching talks...', err)
    }
  }

  const createTalk = async () => {
    if (name === '' || description === '' || speakerBio === '' || speakerName === '') return

    const talk = { name, description, speakerBio, speakerName, clientId: CLIENT_ID }
    console.log('street', state.talks)
    const talks = [...state.talks, talk]

    dispatch({ type: 'SET_TALKS', talks })
    dispatch({ type: 'CLEAR_INPUT' })

    try {
      await API.graphql(graphqlOperation(CreateTalk, { input: talk }))
      console.log('item created!')
    } catch (err) {
      console.log('error creating talk...', err)
    }
  }

  const onChange = (e: React.ChangeEvent<HTMLButtonElement>) => {
    dispatch({ type: 'SET_INPUT', key: e.target.name, value: e.target.value })
  }

  return (
    <>
      <input name="name" onChange={onChange} value={name} placeholder="name" />
      <input name="description" onChange={onChange} value={description} placeholder="description" />
      <input name="speakerName" onChange={onChange} value={speakerName} placeholder="speakerName" />
      <input name="speakerBio" onChange={onChange} value={speakerBio} placeholder="speakerBio" />
      <button onClick={createTalk}>Create Talk</button>
      {talks.map((talk: Talk, index: number) => (
        <div key={index}>
          <h3>{talk.speakerName}</h3>
          <h5>{talk.name}</h5>
          <p>{talk.description}</p>
        </div>
      ))}
    </>
  )
}

export default Talks
